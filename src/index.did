service : {
    http_request: (record {
        url: text;
        method: text;
        body: vec nat8;
        headers: vec record { text; text };
        certificate_version: opt nat16;
    }) -> (record {
        body: vec nat8;
        headers: vec record { text; text };
        upgrade: opt bool;
        streaming_strategy: opt variant { Callback: record { token: vec nat8; callback: func (vec nat8) -> (opt record { token: opt vec nat8; body: vec nat8 }) query } };
        status_code: nat16;
    }) query;
    
    http_request_update: (record {
        url: text;
        method: text;
        body: vec nat8;
        headers: vec record { text; text };
    }) -> (record {
        body: vec nat8;
        headers: vec record { text; text };
        upgrade: opt bool;
        streaming_strategy: opt variant { Callback: record { token: vec nat8; callback: func (vec nat8) -> (opt record { token: opt vec nat8; body: vec nat8 }) query } };
        status_code: nat16;
    });

    // User Endpoints
    post_user: (record { name: text; email: text }) -> (record { message: text; user: record { id: text; name: text; email: text; createdAt: int64 } });
    get_users: () -> (record { message: text; users: vec record { id: text; name: text; email: text; createdAt: int64 } });
    put_user: (record { id: text; name: opt text; email: opt text }) -> (record { message: text; user: record { id: text; name: text; email: text; createdAt: int64 } });
    delete_user: (record { id: text }) -> (record { message: text });

    // Plot Endpoints
    post_plot: (record { userId: text; size: text; location: text; reservedUntil: int64 }) -> (record { message: text; plot: record { id: text; userId: text; size: text; location: text; reservedUntil: int64; createdAt: int64 } });
    get_plots: () -> (record { message: text; plots: vec record { id: text; userId: text; size: text; location: text; reservedUntil: int64; createdAt: int64 } });
    put_plot: (record { id: text; size: opt text; location: opt text; reservedUntil: opt int64 }) -> (record { message: text; plot: record { id: text; userId: text; size: text; location: text; reservedUntil: int64; createdAt: int64 } });
    delete_plot: (record { id: text }) -> (record { message: text });

    // Activity Endpoints
    post_activity: (record { plotId: text; description: text; date: int64 }) -> (record { message: text; activity: record { id: text; plotId: text; description: text; date: int64; createdAt: int64 } });
    get_activities: () -> (record { message: text; activities: vec record { id: text; plotId: text; description: text; date: int64; createdAt: int64 } });
    put_activity: (record { id: text; description: opt text; date: opt int64 }) -> (record { message: text; activity: record { id: text; plotId: text; description: text; date: int64; createdAt: int64 } });
    delete_activity: (record { id: text }) -> (record { message: text });

    // Resource Endpoints
    post_resource: (record { name: text; quantity: int32; available: bool }) -> (record { message: text; resource: record { id: text; name: text; quantity: int32; available: bool; createdAt: int64 } });
    get_resources: () -> (record { message: text; resources: vec record { id: text; name: text; quantity: int32; available: bool; createdAt: int64 } });
    put_resource: (record { id: text; name: opt text; quantity: opt int32; available: opt bool }) -> (record { message: text; resource: record { id: text; name: text; quantity: int32; available: bool; createdAt: int64 } });
    delete_resource: (record { id: text }) -> (record { message: text });

    // Event Endpoints
    post_event: (record { title: text; description: text; date: int64; location: text }) -> (record { message: text; event: record { id: text; title: text; description: text; date: int64; location: text; createdAt: int64 } });
    get_events: () -> (record { message: text; events: vec record { id: text; title: text; description: text; date: int64; location: text; createdAt: int64 } });
    put_event: (record { id: text; title: opt text; description: opt text; date: opt int64; location: opt text }) -> (record { message: text; event: record { id: text; title: text; description: text; date: int64; location: text; createdAt: int64 } });
    delete_event: (record { id: text }) -> (record { message: text });
}
